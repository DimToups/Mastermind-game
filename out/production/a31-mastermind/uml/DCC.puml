@startuml
skinparam classAttributeIconSize 0

package src{
    package model{
        package enums{
            enum Couleur{
                ..Values..
                ABSENT
                BLEU
                JAUNE
                ROUGE
                VERT
                ORANGE
                VIOLET
                TURQUOISE
                ROSE
                ..Mehtods..
                + getVraiesCouleurs() : Couleur[] {static}
            }
            enum Indice{
                ..Values..
                BIEN_PLACE
                MAL_PLACE
                ABSENT
            }
        }
        class Combinaison{
            ..Fields..
            - tailleCombi : Integer
            ..Constructors..
            + <<create>> Combinaison()
            + <<create>> Combinaison(tailleCombi : Integer)
            ..Methods..
            + genererCombinaison(taille : Integer) : Combinaison {static}
            + getCombinaison() : Couleur[]
            + setCouleur(index : Integer, couleur : Couleur)
            + getTailleCombinaison() : Integer
            + estComplet() : Boolean
        }
        class Joueur{
            ..Fields..
            - nom : String
            - score : Integer[]
            ..Methods..
            + <<create>> Joueur(nom : String)
            + getNom() : String
            + getScores() : Integer[]
            + ajouterScorePartie(score : Integer)
        }
        class LigneIndice{
            ..Fields..
            - tailleCombi : Integer
            ..Constructors..
            + <<create>> LigneIndice()
            + <<create>> LigneIndice(tailleCombi : Integer)
            ..Methods..
            + getTailleCombinaison() : Integer
            + getIntIndices() : Integer[]
            + getIndices() : Indice[]
            + calculerScore() : Integer
        }
        class Manche{
            ..Fields..
            - tentativeActuelle : Integer
            - nbTentatives : Integer
            ..Constructors..
            + <<create>> Manche()
            + <<create>> Manche(observateur : ObservateurUI, nbTentatives : Integer, tailleCombinaison : Integer, modeJeu : ModeJeu)
            ..Methods..
            + jouerManche()
            + calculerScore() : Integer
            + getObservateurUI() : ObservateurUI
            + setObservateurUI(observateur : ObservateurUI)
            + getCombinaisonSecrete() : Combinaison
            + setCombinaisonSecrete(combinaisonSecrete : Combinaison)
            + getNbTentatives() : Integer
            + setNbTentatives(n : Integer)
            + getTentativeActuelle() : Integer
            + getTentatives() : Tentative[]
        }
        interface ModeJeu <<interface>>{
            ..Methods..
            afficherIndices(ligne : LigneIndice)
        }
        interface ObservateurManche <<interface>>{
            ..Methods..
            + miseEnPlacePlateau()
            + demanderValidationTentative() : Boolean
        }
        interface ObservateurPartie <<interface>>{
            ..Methods..
            + creerJoueur() : Joueur
            + deciderNbManches() : Integer
            + deciderTailleCombinaison() : Integer
            + deciderNbTentatives() : Integer
            + deciderModeJeu() : ModeJeu
            + finirPartie()
        }
        interface ObservateurTentative <<interface>>{
            ..Methods..
            + changerCouleur(combinaison : Combinaison)
            + afficherIndices(indices : LigneIndice)
            + affichageTentative(combinaison : Combinaison)
            + demanderFinTentative() : Boolean
        }
        interface ObservateurUI <<interface>>{
            ..Constructor..
            + <<create>> ObservateurUI(gestionnaire : GestionnaireJeu)
            ..Methods..
            + getGestionnaire() : GestionnaireJeu
            + setGestionnaire(gestionnaire : GestionnaireJeu)
        }
        class Partie{
            ..Fields..
            - score : Integer
            ..Constructor..
            + <<create>> Partie()
            ..Methods..
            + initialiser()
            + lancerPartie()
            + finirPartie()
            + getManches() : Manche[]
            + setNbManches(n : Integer)
            + getScore() : Integer
            + setScore(score : Integer)
            + getJoueur() : Joueur
            + setJoueur(joueur : Joueur)
            + getObservateurUI() : ObservateurUI
            + setObservateurUI(observateur : ObservateurUI)
        }
        class Tentative{
            ..Constructors..
            + <<create>> Tentative()
            + <<create>> Tentative(observateur : ObservateurUI, tailleCombinaison : Integer, modeJeu : ModeJeu)
            ..Methods..
            + ajoutCouleur(index : Integer, couleur : Couleur)
            + calculBonus() : Integer
            + calculScore() : Integer
            + evaluerTentative(combinaisonSecrete : Combinaison) : Boolean
            + lancerTentative()
            + getObservateurUI() : ObservateurUI
            + setObservateurUI(observateur : ObservateurUI)
            + getCombinaisonEntree() : Combinaison
            + getLigneIndice() : LigneIndice
            + getModeJeu() : ModeJeu
            + setModeJeu(modeJeu : ModeJeu)
            + setTailleCombinaison(tailleCombinaison : Integer)
        }
    }
    package view{
        class AffichageConsole{
            ..Constructor..
            + <<create>> AffichageFenetre(gestionnaire : GestionnaireJeu)
            ..Partie..
            + creerJoueur() : Joueur
            + deciderNbManches() : Integer
            + deciderTailleCombinaison() : Integer
            + deciderNbTentatives() : Integer
            + deciderModeJeu() : ModeJeu
            + finirPartie()
            ..Manche..
            + miseEnPlacePlateau()
            + demanderValidationTentative() : Boolean
            ..Tentative..
            + changerCouleur(combinaison : Combinaison)
            + afficherIndices(indices : LigneIndice)
            + affichageTentative(combinaison : Combinaison)
            + demanderFinTentative() : Boolean
        }
        class AffichageFenetre{
            ..Constructor..
            + <<create>> AffichageFenetre(gestionnaire : GestionnaireJeu)
            ..Partie..
            + creerJoueur() : Joueur
            + deciderNbManches() : Integer
            + deciderTailleCombinaison() : Integer
            + deciderNbTentatives() : Integer
            + deciderModeJeu() : ModeJeu
            + finirPartie()
            ..Manche..
            + miseEnPlacePlateau()
            + demanderValidationTentative() : Boolean
            ..Tentative..
            + changerCouleur(combinaison : Combinaison)
            + afficherIndices(indices : LigneIndice)
            + affichageTentative(combinaison : Combinaison)
            + demanderFinTentative() : Boolean
        }
        class Classique{
            ..Methods..
            afficherIndices(ligne : LigneIndice)
        }
        class Facile{
            ..Methods..
            afficherIndices(ligne : LigneIndice)
        }
        class Numerique{
            ..Methods..
            afficherIndices(ligne : LigneIndice)
        }
    }
    package controller{
        class GestionnaireJeu{
            ..Methods..
            + setPartie(partie : Partie)
            + setUI(ObservateurUI : ui)
            + initialiserPartie()
            + demarrerPartie()
            + miseAJourTailleCombinaison(n : Integer)
            + miseAJourModeJeu(mode : ModeJeu)
            + miseAJourJoueur(joueur : Joueur)
        }
    }
}

src.controller.GestionnaireJeu o--> src.model.Partie : <<joue avec>>


src.model.Combinaison "1" o--> "4..6\n- combinaison" src.model.enums.Couleur : <<est représenté avec>>

src.model.LigneIndice "1" o--> "4..6\n- indices" src.model.enums.Indice : <<est représenté avec>>

src.model.Manche "1" o--> "10..12\n- tentatives" src.model.Tentative : <<est composé de>>
src.model.Manche "1" o--> "1\n- combinaison" src.model.Combinaison : <<cache>>
src.model.Manche "1" o-> "1\n- observateur" src.model.ObservateurManche : <<s'affiche avec>>

src.model.ModeJeu ..> src.model.LigneIndice : <<utilises>>
src.model.ModeJeu <|.. src.view.Classique
src.model.ModeJeu <|.. src.view.Facile
src.model.ModeJeu <|.. src.view.Numerique

src.model.Partie "1" o-l> "1\n- joueur" src.model.Joueur : <<joue la partie>>
src.model.Partie "1" o--> "3..5\n- manches" src.model.Manche : <<est composé de>>
src.model.Partie "1" o-> "1\n- observateur" src.model.ObservateurPartie : <<s'affiche avec>>
src.model.Partie .> src.model.ModeJeu : <<utilise>>

src.model.Tentative "1" o--> "1\n- combinaisonEntree" src.model.Combinaison : <<est définie par>>
src.model.Tentative "1" o--> "1\n- ligneIndice" src.model.LigneIndice : <<donne les indices>>
src.model.Tentative "1" o-> "1\n- modeJeu" src.model.ModeJeu : <<défini l'affichage des indices>>
src.model.Tentative "1" o-> "1\n- observateur" src.model.ObservateurTentative : <<s'affiche avec>>

src.model.ObservateurPartie <|.. src.model.ObservateurUI
src.model.ObservateurUI .l|> src.model.ObservateurManche
src.model.ObservateurUI ..|> src.model.ObservateurTentative


src.view.AffichageConsole ..|> src.model.ObservateurUI

src.view.AffichageFenetre ..|> src.model.ObservateurUI

@enduml