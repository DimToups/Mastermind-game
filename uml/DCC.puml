    @startuml
    skinparam classAttributeIconSize 0

    enum Couleur{
        ..Values..
        RIEN
        ROUGE
        BLEU
        VERT
        JAUNE
    }

    enum Indice {
        ..Values..
        BIEN_PLACE
        MAL_PLACE
        ABSENT
    }

    class GestionnaireJeu{
        ..Methods..
        - creerJoueur() : Joueur
        - getNbManche() : Integer
        - getTailleCombi() : Integer
        - getNbTentatives() : Integer
        - getModeJeu() : ModeJeu
        + demarrerPartie()
    }

    class Joueur{
        ..Fields..
        - nom : String
        - scores : Integer[]
        ..Methods..
        + <<create>> Joueur(nom : String)
        + getNom() : String
        + getScores() : Integer[]
        + ajoutScorePartie(score : Integer)
    }

    class Partie{
        ..Fields..
        - tailleCombi : Integer
        - nbManche : Integer
        - nbTentative : Integer
        - score : Integer
        - mancheActive : Integer
        ..Methods..
        + <<create>> Partie(joueur: Joueur, nbManche : Integer, tailleCombi : Integer, nbTentatives : Integer)
        + lancerPartie()
        + getManche(index: Integer) : Manche
    }

    class Manche{
        ..Fields..
        - tentativeActuelle : Integer
        - nbTentatives : Integer
        ..Methods..
        + <<create>> Manche(tailleCombi : Integer, nbTentatives : Integer)
        + jouerManche() : Integer
        - calculerScore() : Integer
        + getCombinaisonSecrete() : Combinaison
        + getTentative(index: Integer) : Tentative
    }

    class Tentative{
        ..Methods..
        + <<create>> Tentative(tailleCombi : Integer; mode:Modejeu)
        + lancerTentative()
        + ajoutCouleur(index : Integer, couleur : Couleur)
        + evaluerTentative(combinaisonSecrete : Combinaison) : Boolean
        + calculerScore() : Integer
    }

    class Combinaison{
        ..Fields..
        - combinaisonSecrete : Combinaison {static}
        - tailleCombi : Integer
        ..Methods..
        + <<create>> Combinaison(tailleCombi : Integer)
        + genererCombinaisonSecrete() {static}
        + getCouleurCombinaison(index : Integer) : Couleur
        + setCouleurCombinaison (index :Integer, couleur : Couleur)
        + getCombinaison() : Combinaison
        + getTailleCombi() : Integer
        + estComplet() : Boolean
    }

    class LigneIndice{
        ..Fields..
        - tailleCombi : Integer
        ..Methods..
        + getTailleCombi() : Integer
        + getIndice(index : Integer) : Indice
        + setIndice(indice : Indice, index : Integer)
        + getIndices() : Integer[]
        '+ finirTentative()
    }

    interface ModeJeu{
        + afficherIndices() {abstract}
    }

    class Facile implements ModeJeu{
        ..Methods..
        + afficherIndices()
    }

    class Classique implements ModeJeu{
        ..Methods..
        + afficherIndices()
    }

    class Numerique implements ModeJeu{
        ..Methods..
        + afficherIndices()
    }

    Partie "1" o--> "3 : 5\n- _manches" Manche : <<possède>>
    Partie "1" o-> "1\n- _joueur" Joueur : <<joue la partie>>

    GestionnaireJeu "1" o--> "1\n- _partie" Partie : <<lance>>
    GestionnaireJeu ..> Joueur : <<utilises>>

    Manche "1" o---> "10 : 12\n- _tentatives" Tentative : <<possède>>

    Tentative "1" o----> "1\n- _ligneIndice" LigneIndice : <<possède>>
    Tentative "1" o----> "1\n- _combinaisonEntree" Combinaison : <<possède>>

    Combinaison "1" o--> "4 : 6\n- _couleurs" Couleur : <<possède>>

    LigneIndice "1" o--> "4 : 6\n- _indices" Indice : <<possède>>

    ModeJeu "1\n- modeJeu" <--o "1" Partie
    ModeJeu "1\n- modeJeu" <--o "1" Manche
    ModeJeu "1\n- modeJeu" <--o "1" Tentative

    @enduml