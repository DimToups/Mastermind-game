@startuml
skinparam classAttributeIconSize 0

package src{
    package model{
        package enums{
            enum Couleur{
                ..Values..
                ABSENT
                BLEU
                JAUNE
                ROUGE
                VERT
                ORANGE
                VIOLET
                TURQUOISE
                ROSE
                ..Mehtods..
                + getVraiesCouleurs() : Couleur[] {static}
                + nomValide(couleur : Couleur) : String
            }
            enum Indice{
                ..Values..
                BIEN_PLACE
                MAL_PLACE
                ABSENT
                ..Methods..
                + nomValide(indice : Indice) : String
            }
        }
        package observers{
            interface ObservateurIndice <<interface>>{
                ..Methods..
                + afficherIndicesFacile(indices : LigneIndice)
                + afficherIndicesClassique(indices : LigneIndice)
                + afficherIndicesNum√©rique(indices : LigneIndice)
            }
            interface ObservateurManche <<interface>>{
                ..Methods..
                + miseEnPlacePlateau()
                + demanderValidationTentative()
                + prochaineManche(combinaisonSecrete : Combinaison)
            }
            interface ObservateurPartie <<interface>>{
             + entrerModeInitialisation()
             + creerJoueur()
             + deciderNbManches()
             + deciderTailleCombinaison()
             + deciderNbTentatives()
             + deciderModeJeu()
             + demanderFinInitialisation()
             + finirPartie(score: Integer)
             + initialisationManche(nomJoueur: String, MancheActuelle: Integer, nbTentatives: Integer, tailleCombinaison: Integer)
             + resumerManche(score: Integer, couleurs: List<Couleur>, b: boolean)

            }
            interface ObservateurTentative <<interface>>{
                ..Methods..
              + changerCouleur(Combinaison combinaison)
              + afficherIndices(LigneIndice indices)
              + affichageTentative(Combinaison combinaison)
              + demanderFinTentative()
              + finirManche()
              + affichageCombinaison(Combinaison combinaison)
              + demanderRemiseAZero(): boolean
              + demanderFinManche(): boolean
              + deciderMethodeAffichageIndices(ObservateurUI ui, ModeJeu modeJeu, LigneIndice indices)
              + updateCouleur(Couleur couleur, Integer index)
            }
            interface ObservateurUI <<interface>>
        }
        class Combinaison{
            ..Fields..
            - tailleCombi : Integer
            ..Constructors..
            + <<create>> Combinaison()
            + <<create>> Combinaison(tailleCombi : Integer)
            ..Methods..
            + genererCombinaison(taille : Integer) : Combinaison {static}
            + getCombinaison() : Couleur[]
            + setCouleur(index : Integer, couleur : Couleur)
            + getTailleCombinaison() : Integer
            + estComplete() : Boolean
        }
        class Joueur{
            ..Fields..
            - nom : String
            - score : Integer[]
            ..Methods..
            + <<create>> Joueur(nom : String)
            + getNom() : String
            + getScores() : Integer[]
            + ajouterScorePartie(score : Integer)
        }
        class LigneIndice{
            ..Fields..
            - tailleCombi : Integer
            ..Constructors..
            + <<create>> LigneIndice()
            + <<create>> LigneIndice(tailleCombi : Integer)
            ..Methods..
            + getTailleCombinaison() : Integer
            + getIntIndices() : Integer[]
            + getIndices() : Indice[]
            + calculerScore() : Integer
        }
        class Manche{
            ..Fields..
            - tentativeActuelle : Integer
            - nbTentatives : Integer
            ..Constructors..
            + <<create>> Manche(jeu : GestionnaireJeu)
            + <<create>> Manche(observateur : ObservateurUI, nbTentatives : Integer, tailleCombinaison : Integer, modeJeu : ModeJeu)
            ..Methods..
             + calculerScore(): int
             + getObservateurUI(): ObservateurManche
             + setObservateurUI(observateur: ObservateurUI): void
             + getCombinaisonSecrete(): Combinaison
             + setCombinaisonSecrete(combinaisonSecrete: Combinaison): void
             + getNbTentatives(): int
             + setNbTentatives(nbTentatives: int): void
             + getTentativeActuelle(): int
             + getTentatives(): List<Tentative>
             + getGestionnaireJeu(): GestionnaireJeu
             + setGestionnaireJeu(jeu: GestionnaireJeu): void
             + getTailleCombi(): int
             + TentativeSuivante(): void
        }
        interface ModeJeu <<interface>>{
            ..Methods..
            afficherIndices(ligne : LigneIndice)
        }
        class Partie{
            ..Fields..
          - score: Integer
          - mancheActuelle: Integer
          - manches: List<Manche>
           ..Constructor..
            + <<create>>Partie(jeu: GestionnaireJeu)
            ..Methods..
          + lancerProchaineManche()
          + finirPartie()
          + getManches(): List<Manche>
          + getScore(): Integer
          + setScore(score: Integer)
          + getJoueur(): Joueur
          + setJoueur(joueur: Joueur)
          + getUI(): ObservateurPartie
          + setObservateurUI(observer: ObservateurUI)
          + getMancheActuelle(): Integer
          + getGestionnaireJeu(): GestionnaireJeu
          + setGestionnaireJeu(jeu: GestionnaireJeu)
          + setParametres(nbManche: Integer, nbTentatives: Integer, tailleCombinaison: Integer, modeJeu: ModeJeu)
          + resumerManche()
        }
        class Tentative{


            ..Constructors..
            + <<create>> Tentative(jeu : GestionnaireJeu)
            + <<create>> Tentative(observateur : ObservateurUI, tailleCombinaison : Integer, modeJeu : ModeJeu)
            ..Methods..
            + ajoutCouleur(index: Integer, couleur: Couleur)
            + calculBonus(): Integer
            + calculScore(): Integer
            + evaluerTentative(combinaisonSecrete: Combinaison): boolean
            + remiseAZero()
            + getObservateurUI(): ObservateurTentative
            + setObservateurUI(observateur: ObservateurTentative)
            + getCombinaisonEntree(): Combinaison
            + getLigneIndice(): LigneIndice
            + getModeJeu(): ModeJeu
            + setModeJeu(modeJeu: ModeJeu)
            + setTailleCombinaison(tailleCombinaison: Integer)
            + getGestionnaireJeu(): GestionnaireJeu
            + setGestionnaireJeu(jeu: GestionnaireJeu)
            + getTailleCombinaison(): Integer
        }
    }
    package view{


        class AffichageFenetre{
            - jeu: GestionnaireJeu
                             - coefficient: Integer
                             - biPionAbsent, biPionBleu, ..., biPionRose: BufferedImage
                             - biIndiceAbsent, biIndiceBlanc, biIndiceNoir: BufferedImage
                             - biPlateauCaseCombinaison, ..., biPlateauBordBasDroit: BufferedImage
                             - cases: JPanel[][]
                             - buttons: JButton[]
                             - mJNumerique: JLabel[]
                             - indices: JPanel[][]
                             - tentativeActuelle: Integer
                             - tailleCombi: Integer
                             - nbTentatives: Integer
                             - jbFinInitialisation: JButton
                             - jlCreationJoueur: JLabel
                             - jtfCreationJoueur: JTextField
                             - jlNbManches: JLabel
                             -jlNbTentatives: JLabel
                             -jlTailleCombinaison: JLabel
                             - jrbListNbManches: List<JRadioButton>
                             -jrbListNbTentatives: List<JRadioButton>
                             -jrbListTailleCombi: List<JRadioButton>
                             - bgNbManches
                             -bgNbTentatives : ButtonGroup
                             -bgTailleCombi: ButtonGroup
                             - jlDecisionModeJeu: JLabel
                             - jcbModeJeu: JComboBox<String>
                             - mj: ModeJeu
                             + AffichageFenetre(jeu: GestionnaireJeu)
                             + miseEnPlacePlateau()
                             + demanderValidationTentative(): boolean
                             + prochaineManche(combinaisonSecrete: Combinaison)
                             + entrerModeInitialisation()
                             + creerJoueur()
                             + deciderNbManches()
                             + deciderTailleCombinaison()
                             + deciderNbTentatives()
                             + deciderModeJeu()
                             + demanderFinInitialisation()
                             + finirPartie(score: Integer)
                             + initialisationImages()
                             + initialisationManche(nomJoueur: String, MancheActuelle: Integer, nbTentatives: Integer, tailleCombinaison: Integer)
                             + updateCouleur(couleur: Couleur, index: Integer)
                             + changerIndice(panel: JPanel, indice: Indice)
                             + changeColor(panel: JPanel, couleur: Couleur)
                             + changerCouleur(combinaison: Combinaison)
                             + afficherIndices(indices: LigneIndice)
                             + resumerManche(score: Integer, couleurs: List<Couleur>, b: boolean)
                             + getImagePion(couleur: Couleur): BufferedImage
                             + getImageIndice(indice: Indice): BufferedImage
                             + affichageTentative(combinaison: Combinaison)
                             + demanderFinTentative()
                             + initialisationRemplie(): boolean
                             + affichageCombinaison(combinaison: Combinaison)
                             + demanderRemiseAZero(): boolean
                             + demanderFinManche(): boolean
                             + finirManche()
                             + afficherIndicesFacile(indices: LigneIndice)
                             + afficherIndicesClassique(indices: LigneIndice)
                             + afficherIndicesNumerique(indices: LigneIndice)
        }
    }
    package controller{
        class GestionnaireJeu{
            ..Methods..
            + setPartie(partie : Partie)
            + setUI(ObservateurUI : ui)
            + initialiserPartie()
            + demarrerProchaineManche()
            + miseAJourTailleCombinaison(n : Integer)
            + miseAJourModeJeu(mode : ModeJeu)
            + miseAJourJoueur(joueur : Joueur)
            + modifierTentativeActuelle(modificationVoulue : Boolean)
            + passerProchaineTentative()
            + getCombinaisonActuelle() : Combinaison
        }
    }
}

src.controller.GestionnaireJeu o--> src.model.Partie : <<joue avec>>


src.model.Combinaison "1" o--> "4..6\n- combinaison" src.model.enums.Couleur : <<est repr√©sent√© avec>>

src.model.LigneIndice "1" o--> "4..6\n- indices" src.model.enums.Indice : <<est repr√©sent√© avec>>
src.model.LigneIndice "1" o-> "1\n- observateur" src.model.observers.ObservateurIndice : <<s'affiche avec>>

src.model.Manche "1" o--> "10..12\n- tentatives" src.model.Tentative : <<est compos√© de>>
src.model.Manche "1" o--> "1\n- combinaison" src.model.Combinaison : <<cache>>
src.model.Manche "1" o-> "1\n- observateur" src.model.observers.ObservateurManche : <<s'affiche avec>>

src.model.Partie "1" o-l> "1\n- joueur" src.model.Joueur : <<joue la partie>>
src.model.Partie "1" o--> "3..5\n- manches" src.model.Manche : <<est compos√© de>>
src.model.Partie "1" o-> "1\n- observateur" src.model.observers.ObservateurPartie : <<s'affiche avec>>

src.model.Tentative "1" o--l> "1\n- combinaisonEntree" src.model.Combinaison : <<est d√©finie par>>
src.model.Tentative "1" o--> "1\n- ligneIndice" src.model.LigneIndice : <<donne les indices>>
src.model.Tentative "1" o-> "1\n- observateur" src.model.observers.ObservateurTentative : <<s'affiche avec>>

src.model.observers.ObservateurPartie <|.. src.model.observers.ObservateurUI
src.model.observers.ObservateurUI .l|> src.model.observers.ObservateurManche
src.model.observers.ObservateurUI ..|> src.model.observers.ObservateurTentative
src.model.observers.ObservateurUI ...|> src.model.observers.ObservateurIndice



src.view.AffichageFenetre ..|> src.model.observers.ObservateurUI

@enduml